/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// Author: RÃ©mi DEMOL (github.com/remidemol)
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

//- GRID REFINEMENT
//- Number of cells in x and z-directions/block
ncells  13;  // center (square)
ncells2  7; // lateral (inlet)
ncells3  7; // lateral (walls)

//- Number of cells in y-direction (height)
nycells  162;
nycellstop  5;

//- GLOBAL DIMENSIONS
//- Column heigth (m)
total_height 1.50;
dynamic_height  1.35;

//- Column diameter (m)
diameter 0.292;
radius              #calc "$diameter/2.0";
mradius             #calc "-1.0*$radius";

//- Inlet diameter (m)
square_width        0.08;
inlet_diameter      #calc "0.77*$diameter";
inlet_radius        #calc "$inlet_diameter/2.0";
minlet_radius       #calc "-1.0*$inlet_radius";

vertices #codeStream
{
  codeInclude
  #{
      #include "pointField.H"
  #};

  code
  #{
    pointField points(48); 

    //- Inlet central block 
    points[0] = point(-$square_width/sqrt(2.0),     0,                  -$square_width/sqrt(2.0));
    points[1] = point($square_width/sqrt(2.0),      0,                  -$square_width/sqrt(2.0)); 
    points[2] = point($square_width/sqrt(2.0),      $dynamic_height,    -$square_width/sqrt(2.0)); 
    points[3] = point(-$square_width/sqrt(2.0),     $dynamic_height,    -$square_width/sqrt(2.0));
    points[4] = point(-$square_width/sqrt(2.0),     0,                  $square_width/sqrt(2.0));
    points[5] = point($square_width/sqrt(2.0),      0,                  $square_width/sqrt(2.0)); 
    points[6] = point($square_width/sqrt(2.0),      $dynamic_height,    $square_width/sqrt(2.0));
    points[7] = point(-$square_width/sqrt(2.0),     $dynamic_height,    $square_width/sqrt(2.0)); 
    
    //- Inlet lateral blocks 
    points[8]  = point($inlet_radius/sqrt(2.0),        0,                   -$inlet_radius/sqrt(2.0)); 
    points[9]  = point($inlet_radius/sqrt(2.0),        0,                   $inlet_radius/sqrt(2.0));
    points[10] = point($inlet_radius/sqrt(2.0),        $dynamic_height,     $inlet_radius/sqrt(2.0));
    points[11] = point($inlet_radius/sqrt(2.0),        $dynamic_height,     -$inlet_radius/sqrt(2.0)); 
    points[12] = point(-$inlet_radius/sqrt(2.0),       0,                   $inlet_radius/sqrt(2.0)); 
    points[13] = point(-$inlet_radius/sqrt(2.0),       0,                   -$inlet_radius/sqrt(2.0)); 
    points[14] = point(-$inlet_radius/sqrt(2.0),       $dynamic_height,     -$inlet_radius/sqrt(2.0)); 
    points[15] = point(-$inlet_radius/sqrt(2.0),       $dynamic_height,     $inlet_radius/sqrt(2.0));

    //- Column lateral blocks 
    points[16] = point($radius/sqrt(2.0),        0,                 -$radius/sqrt(2.0)); 
    points[17] = point($radius/sqrt(2.0),        0,                 $radius/sqrt(2.0));
    points[18] = point($radius/sqrt(2.0),        $dynamic_height,   $radius/sqrt(2.0));
    points[19] = point($radius/sqrt(2.0),        $dynamic_height,   -$radius/sqrt(2.0)); 
    points[20] = point(-$radius/sqrt(2.0),       0,                 $radius/sqrt(2.0)); 
    points[21] = point(-$radius/sqrt(2.0),       0,                 -$radius/sqrt(2.0)); 
    points[22] = point(-$radius/sqrt(2.0),       $dynamic_height,   -$radius/sqrt(2.0)); 
    points[23] = point(-$radius/sqrt(2.0),       $dynamic_height,   $radius/sqrt(2.0));

    //- TOP PART
    //- Inlet central block 
    points[26] = point($square_width/sqrt(2.0),      $total_height,     -$square_width/sqrt(2.0)); 
    points[27] = point(-$square_width/sqrt(2.0),     $total_height,     -$square_width/sqrt(2.0));
    points[30] = point($square_width/sqrt(2.0),      $total_height,     $square_width/sqrt(2.0));
    points[31] = point(-$square_width/sqrt(2.0),     $total_height,     $square_width/sqrt(2.0)); 
    
    //- Inlet lateral blocks 
    points[34] = point($inlet_radius/sqrt(2.0),        $total_height,   $inlet_radius/sqrt(2.0));
    points[35] = point($inlet_radius/sqrt(2.0),        $total_height,   -$inlet_radius/sqrt(2.0)); 
    points[38] = point(-$inlet_radius/sqrt(2.0),       $total_height,   -$inlet_radius/sqrt(2.0)); 
    points[39] = point(-$inlet_radius/sqrt(2.0),       $total_height,    $inlet_radius/sqrt(2.0));

    //- Column lateral blocks 
    points[42] = point($radius/sqrt(2.0),        $total_height,     $radius/sqrt(2.0));
    points[43] = point($radius/sqrt(2.0),        $total_height,     -$radius/sqrt(2.0)); 
    points[46] = point(-$radius/sqrt(2.0),       $total_height,     -$radius/sqrt(2.0)); 
    points[47] = point(-$radius/sqrt(2.0),       $total_height,     $radius/sqrt(2.0));

    os << points;
  #};
};

blocks
(
    hex (0  1  2  3  4  5  6  7) ($ncells  $nycells  $ncells) simpleGrading (1 1 1) // 0

    hex ( 1  8 11  2  5  9 10  6) ($ncells2  $nycells  $ncells)  simpleGrading (1 1 1) // 1
    hex ( 0 13 14  3  1  8 11  2) ($ncells2  $nycells  $ncells)  simpleGrading (1 1 1) // 2
    hex ( 4 12 15  7  0 13 14  3) ($ncells2  $nycells  $ncells)  simpleGrading (1 1 1) // 3
    hex ( 5  9 10  6  4 12 15  7) ($ncells2  $nycells  $ncells)  simpleGrading (1 1 1) // 4

    hex ( 8 16 19 11  9 17 18 10) ($ncells3   $nycells  $ncells)  simpleGrading (1 1 1) // 5
    hex (13 21 22 14  8 16 19 11) ($ncells3   $nycells  $ncells)  simpleGrading (1 1 1) // 6
    hex (12 20 23 15 13 21 22 14) ($ncells3   $nycells  $ncells)  simpleGrading (1 1 1) // 7
    hex ( 9 17 18 10 12 20 23 15) ($ncells3   $nycells  $ncells)  simpleGrading (1 1 1) // 8

    // TOP PART
    hex ( 3  2 26 27 7  6 30 31) ($ncells  $nycellstop  $ncells) simpleGrading (1 5 1) // 9

    hex ( 2 11 35 26  6 10 34 30) ($ncells2  $nycellstop  $ncells)  simpleGrading (1 5 1) // 10
    hex ( 3 14 38 27  2 11 35 26) ($ncells2  $nycellstop  $ncells)  simpleGrading (1 5 1) // 11
    hex ( 7 15 39 31  3 14 38 27) ($ncells2  $nycellstop  $ncells)  simpleGrading (1 5 1) // 12
    hex ( 6 10 34 30  7 15 39 31) ($ncells2  $nycellstop  $ncells)  simpleGrading (1 5 1) // 13

    hex (11 19 43 35 10 18 42 34) ($ncells3   $nycellstop  $ncells)  simpleGrading (1 5 1) // 14
    hex (14 22 46 38 11 19 43 35) ($ncells3   $nycellstop  $ncells)  simpleGrading (1 5 1) // 15
    hex (15 23 47 39 14 22 46 38) ($ncells3   $nycellstop  $ncells)  simpleGrading (1 5 1) // 16
    hex (10 18 42 34 15 23 47 39) ($ncells3   $nycellstop  $ncells)  simpleGrading (1 5 1) // 17

);

r_inlet        0.065;
mr_inlet       #calc "-1.0*$r_inlet";

edges
(
    arc  0  1 (0                0                   $mr_inlet)
    arc  1  5 ($r_inlet           0                   0)
    arc  4  5 (0                0                   $r_inlet)
    arc  0  4 ($mr_inlet         0                   0)

    arc  3  2 (0                $dynamic_height                   $mr_inlet)
    arc  2  6 ($r_inlet         $dynamic_height                   0)
    arc  6  7 (0                $dynamic_height                   $r_inlet)
    arc  3  7 ($mr_inlet        $dynamic_height                   0)

    arc 27 26 (0                $total_height                   $mr_inlet)
    arc 26 30 ($r_inlet         $total_height                   0)
    arc 30 31 (0                $total_height                   $r_inlet)
    arc 27 31 ($mr_inlet        $total_height                   0)

    arc  8  9 ($inlet_radius    0                   0)
    arc 11 10 ($inlet_radius    $dynamic_height     0)
    arc 8  13 (0                0                   $minlet_radius)
    arc 11 14 (0                $dynamic_height     $minlet_radius)
    arc  9 12 (0                0                   $inlet_radius)
    arc 10 15 (0                $dynamic_height     $inlet_radius)
    arc 12 13 ($minlet_radius   0                   0)
    arc 15 14 ($minlet_radius   $dynamic_height     0)

    arc 16 17 ($radius    0                 0)
    arc 18 19 ($radius    $dynamic_height   0)
    arc 16 21 (0          0                 $mradius)
    arc 19 22 (0          $dynamic_height   $mradius)
    arc 17 20 (0          0                 $radius)
    arc 23 18 (0          $dynamic_height   $radius)
    arc 20 21 ($mradius   0                 0)
    arc 23 22 ($mradius   $dynamic_height   0)


    arc 35 34 ($inlet_radius    $total_height     0)
    arc 35 38 (0                $total_height     $minlet_radius)
    arc 34 39 (0                $total_height     $inlet_radius)
    arc 39 38 ($minlet_radius   $total_height     0)

    arc 42 43 ($radius    $total_height   0)
    arc 43 46 (0          $total_height   $mradius)
    arc 47 42 (0          $total_height   $radius)
    arc 47 46 ($mradius   $total_height   0)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 1 5 4)

            (0 1 8 13)
            (1 5 9 8)
            (4 12 9 5)
            (0 13 12 4)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (27 31 30 26) 
            (26 30 34 35)
            (30 31 39 34)
            (31 27 38 39)
            (27 26 35 38)

            (34 42 43 35)
            (35 43 46 38)
            (38 46 47 39)
            (39 47 42 34)
        );
    }
    walls
    {
        type wall;
        faces
        (
            //- Down walls
            (9 17 16 8)
            (8 16 21 13)
            (13 21 20 12)
            (12 20 17 9)

           //- Lateral walls
            (21 16 19 22)
            (16 17 18 19)
            (17 20 23 18)
            (20 21 22 23)

           //- Top lateral walls
            (22 19 43 46)
            (19 18 42 43)
            (18 23 47 42)
            (23 22 46 47)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
        );
    }
);

mergePatchPairs
(    
);

// ************************************************************************* //
